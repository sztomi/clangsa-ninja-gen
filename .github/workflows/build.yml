name: sa_ninja_gen

on:
  push:
    branches:
      - '*'
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: x86_64-unknown-linux-musl

      - name: Run cargo test
        run: |
          sudo apt-get update && sudo apt-get install -y ninja-build
          cargo test

      - name: Run cargo fmt
        run: |
          cargo fmt -- --check

  release:
    needs: build_and_test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up environment
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: x86_64-unknown-linux-musl

      - name: Build release
        run: ./build-release-linux.sh

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        with:
          name: release-artifacts
          path: dist/*.zip

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          name: Release ${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: false
          files: dist/*.zip

  build_and_test_macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: x86_64-unknown-linux-musl

      - name: Run cargo fmt
        run: |
          cargo fmt -- --check

      - name: Import code signing certificate
        env:
          MACOS_CODESIGN_CERT_BASE64: ${{ secrets.MACOS_CODESIGN_CERT_BASE64 }}
          MACOS_CODESIGN_CERT_PASSWORD: ${{ secrets.MACOS_CODESIGN_CERT_PASSWORD }}
        run: |
          echo "${{ secrets.MACOS_CODESIGN_CERT_BASE64 }}" | base64 --decode > certificate.p12
          sudo security create-keychain -p actions build.keychain
          sudo security default-keychain -s build.keychain
          sudo security unlock-keychain -p actions build.keychain
          sudo security import certificate.p12 -k build.keychain -P "${{ secrets.MACOS_CODESIGN_CERT_PASSWORD }}" -T /usr/bin/codesign
          sudo security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k actions build.keychain

      - name: Build and Release macOS Binaries
        env:
          API_KEY_CONTENTS: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
          ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
        run: ./build-release-macos.sh

      - name: Upload release asset
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v2
        with:
          name: my_project_macos
          path: dist/my_project_macos.tar.gz
